version: '3.7'

services:
  traefik:
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:v2.5
    # Enables the web UI and tells Traefik to listen to docker
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      #      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAIN_NAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      #      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-duckdns.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.dns-duckdns.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-duckdns.acme.storage=/acme.json
      - --certificatesResolvers.dns-duckdns.acme.dnsChallenge.provider=duckdns
    environment:
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
    security_opt:
      - no-new-privileges:true
    ports:
      - '80:80'
      - '443:443'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - ${APPDATA_PATH}/traefik2/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPDATA_PATH}/traefik2/acme/acme.json:/acme.json
      - ${APPDATA_PATH}/traefik2/traefik.log:/traefik.log
      # - ${APPDATA_PATH}/traefik2/shared
    labels:
      - 'traefik.enable=true'
      # HTTP-to-HTTPS Redirect
      - 'traefik.http.routers.http-catchall.entrypoints=http'
      - 'traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)'
      - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      # HTTP Routers
      - 'traefik.http.routers.traefik-rtr.entrypoints=https'
      - 'traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAIN_NAME`)'
      - 'traefik.http.routers.traefik-rtr.tls=true'
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-duckdns" # Comment out this line after first run of traefik to force the use of wildcard certs
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME'
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME'
      ## Services - API
      - 'traefik.http.routers.traefik-rtr.service=api@internal'
      ## Middlewares
      - 'traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file'
